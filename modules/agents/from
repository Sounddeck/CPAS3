import logging
import uuid
import os
import json
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, Optional, Any, List

# --- Use Absolute Imports ---
# Changed from relative imports to hopefully resolve ModuleNotFoundError
from modules.memory.structured_memory import StructuredMemory
from modules.agents.agent_instance import AgentInstance
# --- End Absolute Imports ---

# Placeholder for ToolManager - replace with actual import later
# from ..tools.tool_manager import ToolManager

logger = logging.getLogger(__name__)

class AgentManager:
    """
    Manages the lifecycle and state of multiple AgentInstances.
    Handles loading, saving, creation, and retrieval of agents.
    Provides access to shared resources like memory and tools.
    """

    def __init__(self, base_storage_path: Optional[str] = None):
        """
        Initializes the AgentManager.

        Args:
            base_storage_path (Optional[str]): The base directory for storing agent state
                                               and memory. Defaults to ~/.cpas3/.
        """
        if base_storage_path:
            self.storage_path = Path(base_storage_path)
        else:
            self.storage_path = Path.home() / ".cpas3"

        self.agents_path = self.storage_path / "agents"
        self.memory_db_path = self.storage_path / "cpas_memory.db"

        # Ensure storage directories exist
        self.agents_path.mkdir(parents=True, exist_ok=True)
        logger.info(f"Agent state storage initialized at: {self.agents_path}")

        # Initialize Structured Memory (Database)
        try:
            self.memory = StructuredMemory(db_path=str(self.memory_db_path))
            logger.info(f"Structured Memory initialized at: {self.memory_db_path}")
            # Log AgentManager initialization event
            self.log_event_to_memory(
                event_type="SYSTEM_COMPONENT_INIT",
                source="AgentManager",
                details={"component": "AgentManager", "status": "initialized", "storage_path": str(self.storage_path)}
            )
        except Exception as e:
            logger.error(f"Failed to initialize Structured Memory: {e}", exc_info=True)
            # Decide how to handle this - maybe raise the exception?
            # For now, set memory to None to indicate failure.
            self.memory = None
            self.log_event_to_memory( # Still try to log if possible, might fail
                 event_type="SYSTEM_COMPONENT_INIT_FAILURE",
                 source="AgentManager",
                 details={"component": "StructuredMemory", "error": str(e)}
            )
            # Depending on severity, might want to raise e here

        # Initialize Tool Manager (Placeholder)
        # self.tool_manager = ToolManager()
        # logger.info("Tool Manager initialized (placeholder).")

        # Dictionary to hold active agent instances
        self.active_agents: Dict[str, AgentInstance] = {}

        # Load existing agents from storage
        self._load_all_agents()

    def log_event_to_memory(self, event_type: str, source: str, details: Dict[str, Any], correlation_id: Optional[str] = None):
        """Logs an event to the structured memory if available."""
        if self.memory:
            try:
                self.memory.log_event(
                    event_type=event_type,
                    source=source,
                    details=details,
                    correlation_id=correlation_id
                )
            except Exception as e:
                logger.error(f"Failed to log event to Structured Memory: {e}", exc_info=True)
        else:
            logger.warning(f"Structured Memory not available. Skipping event log: {event_type} from {source}")


    def create_agent(
        self,
        agent_type: str,
        config: Optional[Dict[str, Any]] = None,
        initial_state: Optional[Dict[str, Any]] = None,
        agent_id: Optional[str] = None,
    ) -> Optional[AgentInstance]:
        """
        Creates a new AgentInstance, assigns an ID, initializes it,
        saves its initial state, and adds it to the active agents.

        Args:
            agent_type (str): The type of agent to create (e.g., 'TaskPlanner').
            config (Optional[Dict[str, Any]]): Configuration for the agent.
            initial_state (Optional[Dict[str, Any]]): Initial state data.
            agent_id (Optional[str]): A specific ID to assign. If None, a UUID is generated.

        Returns:
            Optional[AgentInstance]: The created agent instance, or None if creation failed.
        """
        if agent_id is None:
            agent_id = f"agent_{uuid.uuid4()}"
        elif agent_id in self.active_agents:
             logger.warning(f"Agent with ID {agent_id} already exists. Cannot create.")
             return self.active_agents[agent_id] # Return existing one

        logger.info(f"Creating agent: ID={agent_id}, Type={agent_type}")
        self.log_event_to_memory(
            event_type="AGENT_CREATION_REQUESTED",
            source="AgentManager",
            details={"agent_id": agent_id, "agent_type": agent_type, "config": config, "initial_state": initial_state},
            correlation_id=agent_id
        )

        try:
            instance = AgentInstance(
                agent_id=agent_id,
                agent_manager=self, # Pass self (AgentManager instance)
                agent_type=agent_type,
                config=config,
                initial_state=initial_state,
            )
            self.active_agents[agent_id] = instance
            self.save_agent_state(agent_id) # Save initial state immediately
            logger.info(f"Agent created and initial state saved: ID={agent_id}")
            self.log_event_to_memory(
                event_type="AGENT_CREATED",
                source="AgentManager",
                details={"agent_id": agent_id, "agent_type": agent_type},
                correlation_id=agent_id
            )
            return instance
        except Exception as e:
            logger.error(f"Failed to create agent instance {agent_id}: {e}", exc_info=True)
            self.log_event_to_memory(
                event_type="AGENT_CREATION_FAILED",
                source="AgentManager",
                details={"agent_id": agent_id, "agent_type": agent_type, "error": str(e)},
                correlation_id=agent_id
            )
            # Clean up if instance creation failed mid-way
            if agent_id in self.active_agents:
                del self.active_agents[agent_id]
            return None

    def get_agent(self, agent_id: str) -> Optional[AgentInstance]:
        """
        Retrieves an active agent instance by its ID.

        Args:
            agent_id (str): The ID of the agent to retrieve.

        Returns:
            Optional[AgentInstance]: The agent instance, or None if not found.
        """
        agent = self.active_agents.get(agent_id)
        if not agent:
            logger.warning(f"Attempted to get non-active agent: {agent_id}")
            # Optionally try to load it here if not found?
            # agent = self._load_agent(agent_id)
        return agent

    def list_active_agents(self) -> List[str]:
        """Returns a list of IDs of currently active agents."""
        return list(self.active_agents.keys())

    def save_agent_state(self, agent_id: str):
        """
        Saves the current state of a specific agent to a JSON file.

        Args:
            agent_id (str): The ID of the agent whose state needs saving.
        """
        agent = self.active_agents.get(agent_id)
        if not agent:
            logger.error(f"Cannot save state: Agent {agent_id} not found in active agents.")
            return

        state_file_path = self.agents_path / f"{agent_id}.state.json"
        state_data = agent.get_state() # Get serializable state from the instance
        state_data["_last_saved_utc"] = datetime.now(timezone.utc).isoformat()

        try:
            with open(state_file_path, "w") as f:
                json.dump(state_data, f, indent=4)
            logger.info(f"Saved state for agent {agent_id} to {state_file_path}")
            self.log_event_to_memory(
                event_type="AGENT_STATE_SAVED",
                source="AgentManager",
                details={"agent_id": agent_id, "file_path": str(state_file_path)},
                correlation_id=agent_id
            )
        except Exception as e:
            logger.error(f"Failed to save state for agent {agent_id}: {e}", exc_info=True)
            self.log_event_to_memory(
                event_type="AGENT_STATE_SAVE_FAILED",
                source="AgentManager",
                details={"agent_id": agent_id, "error": str(e)},
                correlation_id=agent_id
            )

    def _load_agent(self, agent_id: str) -> Optional[AgentInstance]:
        """
        Loads an agent's state from its JSON file and creates an instance.
        Adds the loaded agent to the active_agents dictionary.

        Args:
            agent_id (str): The ID of the agent to load.

        Returns:
            Optional[AgentInstance]: The loaded agent instance, or None if loading failed.
        """
        if agent_id in self.active_agents:
            logger.warning(f"Agent {agent_id} is already loaded and active.")
            return self.active_agents[agent_id]

        state_file_path = self.agents_path / f"{agent_id}.state.json"
        if not state_file_path.exists():
            logger.error(f"Cannot load state: State file not found for agent {agent_id} at {state_file_path}")
            return None

        logger.info(f"Loading agent state from: {state_file_path}")
        self.log_event_to_memory(
             event_type="AGENT_LOAD_REQUESTED",
             source="AgentManager",
             details={"agent_id": agent_id, "file_path": str(state_file_path)},
             correlation_id=agent_id
        )

        try:
            with open(state_file_path, "r") as f:
                state_data = json.load(f)

            agent_type = state_data.get("agent_type", "UnknownAgentType") # Get type from state
            config = state_data.get("config", {})

            # Create instance without initial_state, as state_data *is* the state
            instance = AgentInstance(
                agent_id=agent_id,
                agent_manager=self,
                agent_type=agent_type,
                config=config,
                initial_state=None, # State will be loaded explicitly
            )
            instance.load_state(state_data) # Load the full state into the instance

            self.active_agents[agent_id] = instance
            logger.info(f"Successfully loaded agent: ID={agent_id}, Type={agent_type}")
            self.log_event_to_memory(
                 event_type="AGENT_LOADED",
                 source="AgentManager",
                 details={"agent_id": agent_id, "agent_type": agent_type},
                 correlation_id=agent_id
            )
            return instance
        except json.JSONDecodeError as e:
             logger.error(f"Failed to load agent {agent_id}: Invalid JSON in state file {state_file_path}. Error: {e}", exc_info=True)
             self.log_event_to_memory(
                 event_type="AGENT_LOAD_FAILED",
                 source="AgentManager",
                 details={"agent_id": agent_id, "error": f"JSONDecodeError: {e}"},
                 correlation_id=agent_id
            )
             return None
        except Exception as e:
            logger.error(f"Failed to load agent {agent_id} from {state_file_path}: {e}", exc_info=True)
            self.log_event_to_memory(
                 event_type="AGENT_LOAD_FAILED",
                 source="AgentManager",
                 details={"agent_id": agent_id, "error": str(e)},
                 correlation_id=agent_id
            )
            # Clean up if instance creation failed mid-way
            if agent_id in self.active_agents:
                 del self.active_agents[agent_id]
            return None

    def _load_all_agents(self):
        """Loads all agent states from the storage directory."""
        logger.info(f"Scanning for existing agent states in {self.agents_path}...")
        count = 0
        for state_file in self.agents_path.glob("*.state.json"):
            agent_id = state_file.name.replace(".state.json", "")
            logger.debug(f"Found potential state file for agent ID: {agent_id}")
            if self._load_agent(agent_id):
                 count += 1
        logger.info(f"Finished loading agents. Total loaded: {count}")

    def save_all_agents(self):
        """Saves the state of all currently active agents."""
        logger.info(f"Saving state for {len(self.active_agents)} active agents...")
        count = 0
        for agent_id in list(self.active_agents.keys()): # Iterate over copy of keys
            try:
                self.save_agent_state(agent_id)
                count += 1
            except Exception as e:
                logger.error(f"Error saving agent {agent_id} during save_all: {e}", exc_info=True)
        logger.info(f"Finished saving agents. Total saved: {count}")


    def append_agent_history(self, agent_id: str, history_entries: List[Dict[str, Any]]):
        """
        Appends entries to an agent's history log (potentially stored separately or in memory).
        Currently a placeholder - needs implementation based on history storage strategy.
        Might involve logging specific history events to StructuredMemory.
        """
        # TODO: Define how history is stored (e.g., separate files, database table)
        agent = self.get_agent(agent_id)
        if agent:
            # Option 1: Log each entry to StructuredMemory
            for entry in history_entries:
                 self.log_event_to_memory(
                     event_type="AGENT_HISTORY_APPENDED",
                     source=f"AgentInstance_{agent.agent_type}_{agent_id}",
                     details=entry, # Log the actual history entry content
                     correlation_id=agent_id
                 )
            # Option 2: Store in AgentInstance memory (might get large)
            # agent.history.extend(history_entries)
            # Option 3: Write to a dedicated history file/database
            # self._write_history_log(agent_id, history_entries)
            logger.debug(f"Placeholder: Appended {len(history_entries)} entries to history for agent {agent_id}")
        else:
             logger.warning(f"Cannot append history: Agent {agent_id} not active.")

# Example usage (for testing purposes)
if __name__ == "__main__":
    print("Running AgentManager example...")
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Use a temporary directory for this example
    temp_storage = Path("./_temp_cpas3_storage")
    if temp_storage.exists():
        import shutil
        print(f"Removing existing temp storage: {temp_storage}")
        shutil.rmtree(temp_storage)

    print(f"Using temporary storage: {temp_storage.resolve()}")
    manager = AgentManager(base_storage_path=str(temp_storage))

    print("\n--- Initial State ---")
    print(f"Active agents: {manager.list_active_agents()}") # Should be empty if temp dir was clean

    print("\n--- Creating Agents ---")
    agent1 = manager.create_agent(agent_type="Planner", config={"goal": "Plan vacation"})
    agent2 = manager.create_agent(agent_type="Executor", initial_state={"task": "Book flights"})

    if agent1: print(f"Created Agent 1 ID: {agent1.agent_id}")
    if agent2: print(f"Created Agent 2 ID: {agent2.agent_id}")

    print(f"Active agents after creation: {manager.list_active_agents()}")

    print("\n--- Getting Agent ---")
    retrieved_agent1 = manager.get_agent(agent1.agent_id)
    if retrieved_agent1:
        print(f"Retrieved Agent 1 Type: {retrieved_agent1.agent_type}")
        print(f"Retrieved Agent 1 State: {retrieved_agent1.get_state()}")
    else:
        print(f"Could not retrieve agent {agent1.agent_id}")

    print("\n--- Simulating Agent Run (Triggers Logging in AgentInstance) ---")
    if retrieved_agent1:
        print(f"Running agent {retrieved_agent1.agent_id}...")
        retrieved_agent1.run({"input": "Find flights to Hawaii"})
        # Update state and save
        retrieved_agent1.state["last_action"] = "searched flights"
        manager.save_agent_state(retrieved_agent1.agent_id)

    print("\n--- Saving All Agents ---")
    manager.save_all_agents()

    print("\n--- Simulating Shutdown and Reload ---")
    manager = None # Clear the instance
    print("Cleared manager instance.")
    print("Initializing new manager (should load from temp storage)...")
    new_manager = AgentManager(base_storage_path=str(temp_storage))

    print(f"Active agents after reload: {new_manager.list_active_agents()}")

    reloaded_agent1 = new_manager.get_agent(agent1.agent_id)
    if reloaded_agent1:
        print(f"Reloaded Agent 1 Type: {reloaded_agent1.agent_type}")
        print(f"Reloaded Agent 1 State: {reloaded_agent1.get_state()}") # Check if last_action persisted
    else:
        print(f"Could not retrieve agent {agent1.agent_id} after reload.")

    print("\n--- Checking Database Content ---")
    if new_manager.memory:
        print("Last 10 events from Structured Memory:")
        events = new_manager.memory.query_events(limit=10, order_by_timestamp_desc=True)
        for event in reversed(events): # Print oldest first
            print(f"- {event['timestamp_iso']} [{event['event_type']}] ({event['source']}) CorrID: {event['correlation_id']} Details: {event['details']}")
    else:
        print("Structured Memory was not available.")


    print("\nAgentManager example finished.")
    # Optional: Clean up temp directory
    # print(f"Cleaning up temp storage: {temp_storage}")
    # shutil.rmtree(temp_storage)

