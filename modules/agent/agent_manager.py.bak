"""
Agent Manager for CPAS3
Manages the lifecycle of agents
"""

import os
import time
import logging
import json
from typing import Dict, List, Any, Optional, Union

# Import agent types
from modules.agent.agents.base_agent import Agent, AgentType, AgentStatus
from modules.agent.agents.task_agent import TaskAgent
from modules.agent.agents.search_agent import SearchAgent

# Import monitoring
from modules.agent.monitoring.resource_monitor import ResourceMonitor

logger = logging.getLogger(__name__)

class AgentManager:
    """Manages the lifecycle of agents"""
    
    def __init__(self):
        """Initialize the agent manager"""
        self.agents = {}
        self.resource_monitor = ResourceMonitor(update_interval=3.0)
        self.resource_monitor.start()
        logger.info("AgentManager initialized")
    
    def create_agent(self, 
                   name: str, 
                   agent_type: str = "Generic", 
                   description: str = "",
                   config: Dict[str, Any] = None) -> str:
        """
        Create a new agent
        
        Args:
            name: The name of the agent
            agent_type: Type of agent to create
            description: Optional description
            config: Optional configuration parameters
            
        Returns:
            The ID of the newly created agent
        """
        try:
            # Convert string type to enum
            agent_type_enum = None
            for at in AgentType:
                if at.value == agent_type:
                    agent_type_enum = at
                    break
            
            if not agent_type_enum:
                agent_type_enum = AgentType.GENERIC
            
            # Create the appropriate agent type
            agent = None
            if agent_type_enum == AgentType.TASK:
                agent = TaskAgent(name=name, description=description)
            elif agent_type_enum == AgentType.SEARCH:
                agent = SearchAgent(name=name, description=description)
            else:
                # Default to base agent
                agent = Agent(name=name, agent_type=agent_type_enum, description=description)
            
            # Initialize with config if provided
            if config:
                agent.initialize(config)
            
            # Store the agent
            self.agents[agent.id] = agent
            
            # Add to resource monitor
            self.resource_monitor.add_agent(agent.id, agent)
            
            logger.info(f"Created agent: {name} (type: {agent_type}, id: {agent.id})")
            return agent.id
            
        except Exception as e:
            logger.error(f"Error creating agent: {str(e)}")
            raise
    
    def get_agent(self, agent_id: str) -> Optional[Agent]:
        """Get an agent by ID"""
        return self.agents.get(agent_id)
    
    def get_agents(self) -> Dict[str, Dict[str, Any]]:
        """Get all agents with their status"""
        result = {}
        for agent_id, agent in self.agents.items():
            result[agent_id] = agent.get_status()
        return result
    
    def start_agent(self, agent_id: str) -> bool:
        """Start an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
            
        return agent.start()
    
    def stop_agent(self, agent_id: str) -> bool:
        """Stop an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
            
        return agent.stop()
    
    def pause_agent(self, agent_id: str) -> bool:
        """Pause an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
            
        return agent.pause()
    
    def resume_agent(self, agent_id: str) -> bool:
        """Resume a paused agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
            
        return agent.resume()
    
    def delete_agent(self, agent_id: str) -> bool:
        """Delete an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
        
        # Stop the agent if it's running
        if agent.status == AgentStatus.RUNNING:
            agent.stop()
        
        # Remove from resource monitor
        self.resource_monitor.remove_agent(agent_id)
        
        # Remove from agents dictionary
        del self.agents[agent_id]
        
        logger.info(f"Deleted agent: {agent_id}")
        return True
    
    def get_agent_status(self, agent_id: str) -> Optional[Dict[str, Any]]:
        """Get current status of an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return None
            
        return agent.get_status()
    
    def get_agent_logs(self, agent_id: str, limit: int = 20) -> List[Dict[str, Any]]:
        """Get logs for an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return []
            
        return agent.get_logs(limit=limit)
    
    def add_task(self, agent_id: str, task_name: str, task_data: Dict[str, Any] = None) -> Optional[str]:
        """Add a task to an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return None
            
        return agent.add_task(task_name, task_data)
    
    def shutdown(self) -> None:
        """Shutdown the agent manager and all agents"""
        logger.info("Shutting down AgentManager")
        
        # Stop all agents
        for agent_id, agent in list(self.agents.items()):
            try:
                if agent.status == AgentStatus.RUNNING:
                    agent.stop()
            except Exception as e:
                logger.error(f"Error stopping agent {agent_id} during shutdown: {str(e)}")
        
        # Stop resource monitor
        self.resource_monitor.stop()
        
        logger.info("AgentManager shutdown complete")
    
    def get_system_metrics(self) -> Dict[str, Any]:
        """Get system-wide resource metrics"""
        return self.resource_monitor.get_system_metrics()
