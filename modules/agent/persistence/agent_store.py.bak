"""
Agent persistence for CPAS3
Saves and loads agent configurations from disk
"""

import os
import json
import time
import logging
import pickle
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)

class AgentStore:
    """Manages persistent storage of agent data"""
    
    def __init__(self, storage_dir: str = None):
        """Initialize the agent store"""
        if storage_dir is None:
            home_dir = os.path.expanduser("~")
            self.storage_dir = os.path.join(home_dir, ".cpas3", "agents")
        else:
            self.storage_dir = storage_dir
            
        # Create directory if it doesn't exist
        os.makedirs(self.storage_dir, exist_ok=True)
        logger.info(f"Agent store initialized at {self.storage_dir}")
    
    def save_agent_metadata(self, agent_id: str, metadata: Dict[str, Any]) -> bool:
        """Save agent metadata to disk"""
        try:
            file_path = os.path.join(self.storage_dir, f"{agent_id}.json")
            with open(file_path, 'w') as f:
                json.dump(metadata, f, indent=2)
            logger.info(f"Saved metadata for agent {agent_id}")
            return True
        except Exception as e:
            logger.error(f"Error saving agent metadata: {str(e)}")
            return False
    
    def save_agent_state(self, agent_id: str, agent_obj: Any) -> bool:
        """Save complete agent state to disk using pickle"""
        try:
            file_path = os.path.join(self.storage_dir, f"{agent_id}.pkl")
            with open(file_path, 'wb') as f:
                pickle.dump(agent_obj, f)
            logger.info(f"Saved state for agent {agent_id}")
            return True
        except Exception as e:
            logger.error(f"Error saving agent state: {str(e)}")
            return False
    
    def load_agent_metadata(self, agent_id: str) -> Optional[Dict[str, Any]]:
        """Load agent metadata from disk"""
        try:
            file_path = os.path.join(self.storage_dir, f"{agent_id}.json")
            if not os.path.exists(file_path):
                return None
                
            with open(file_path, 'r') as f:
                metadata = json.load(f)
            return metadata
        except Exception as e:
            logger.error(f"Error loading agent metadata: {str(e)}")
            return None
    
    def load_agent_state(self, agent_id: str) -> Optional[Any]:
        """Load complete agent state from disk"""
        try:
            file_path = os.path.join(self.storage_dir, f"{agent_id}.pkl")
            if not os.path.exists(file_path):
                return None
                
            with open(file_path, 'rb') as f:
                agent_obj = pickle.load(f)
            logger.info(f"Loaded state for agent {agent_id}")
            return agent_obj
        except Exception as e:
            logger.error(f"Error loading agent state: {str(e)}")
            return None
    
    def list_agents(self) -> List[str]:
        """List all saved agent IDs"""
        try:
            agent_ids = []
            for filename in os.listdir(self.storage_dir):
                if filename.endswith('.json'):
                    agent_ids.append(filename[:-5])  # Remove .json extension
            return agent_ids
        except Exception as e:
            logger.error(f"Error listing agents: {str(e)}")
            return []
    
    def delete_agent(self, agent_id: str) -> bool:
        """Delete agent data from disk"""
        try:
            # Delete metadata file
            metadata_path = os.path.join(self.storage_dir, f"{agent_id}.json")
            if os.path.exists(metadata_path):
                os.remove(metadata_path)
            
            # Delete state file
            state_path = os.path.join(self.storage_dir, f"{agent_id}.pkl")
            if os.path.exists(state_path):
                os.remove(state_path)
                
            logger.info(f"Deleted agent {agent_id} from disk")
            return True
        except Exception as e:
            logger.error(f"Error deleting agent: {str(e)}")
            return False
