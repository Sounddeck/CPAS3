"""
Agent Manager for CPAS3
Manages the lifecycle of agents
"""

import os
import time
import logging
import json
from typing import Dict, List, Any, Optional, Union

# Import agent types
from modules.agent.agents.base_agent import Agent, AgentType, AgentStatus
from modules.agent.agents.task_agent import TaskAgent
from modules.agent.agents.search_agent import SearchAgent
from modules.agent.tools.file_tool import FileTool

# Import monitoring
from modules.agent.monitoring.resource_monitor import ResourceMonitor

# Import the agent store
from modules.agent.persistence.agent_store import AgentStore

# Import analytics
from modules.agent.analytics.performance_tracker import PerformanceTracker

logger = logging.getLogger(__name__)

class AgentManager:
    """Manages the lifecycle of agents"""
    
    def __init__(self):
        """Initialize the agent manager"""
        self.agents = {}
        self.resource_monitor = ResourceMonitor(update_interval=3.0)
        self.resource_monitor.start()
        # Initialize agent store for persistence
        self.agent_store = AgentStore()
        # Initialize performance tracker for analytics
        self.performance_tracker = PerformanceTracker(max_history=500)
        # Load any previously saved agents
        self._load_saved_agents()
        logger.info("AgentManager initialized")
        self.tools = {
        'file': FileTool()
    }
    def create_agent(self, 
                   name: str, 
                   agent_type: str = "Generic", 
                   description: str = "",
                   config: Dict[str, Any] = None) -> str:
        """
        Create a new agent
        
        Args:
            name: The name of the agent
            agent_type: Type of agent to create
            description: Optional description
            config: Optional configuration parameters
            
        Returns:
            The ID of the newly created agent
        """
        try:
            # Convert string type to enum
            agent_type_enum = None
            for at in AgentType:
                if at.value == agent_type:
                    agent_type_enum = at
                    break
            
            if not agent_type_enum:
                agent_type_enum = AgentType.GENERIC
            
            # Create the appropriate agent type
            agent = None
            if agent_type_enum == AgentType.TASK:
                agent = TaskAgent(name=name, description=description)
            elif agent_type_enum == AgentType.SEARCH:
                agent = SearchAgent(name=name, description=description)
            else:
                # Default to base agent
                agent = Agent(name=name, agent_type=agent_type_enum, description=description)
            
            # Initialize with config if provided
            if config:
                agent.initialize(config)
            
            # Store the agent
            self.agents[agent.id] = agent
            
            # Add to resource monitor
            self.resource_monitor.add_agent(agent.id, agent)
            
            # Save the new agent
            self.save_agent(agent.id)
            
            # Track initial metrics
            self._update_agent_metrics(agent.id)
            
            logger.info(f"Created agent: {name} (type: {agent_type}, id: {agent.id})")
            return agent.id
            
        except Exception as e:
            logger.error(f"Error creating agent: {str(e)}")
            raise
    
    def get_agent(self, agent_id: str) -> Optional[Agent]:
        """Get an agent by ID"""
        return self.agents.get(agent_id)
    
    def get_agents(self) -> Dict[str, Dict[str, Any]]:
        """Get all agents with their status"""
        result = {}
        for agent_id, agent in self.agents.items():
            result[agent_id] = agent.get_status()
        return result
    
    def start_agent(self, agent_id: str) -> bool:
        """Start an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
            
        result = agent.start()
        if result:
            # Start tracking metrics for the agent
            self._start_metrics_tracking(agent_id)
        return result
    
    def stop_agent(self, agent_id: str) -> bool:
        """Stop an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
            
        return agent.stop()
    
    def pause_agent(self, agent_id: str) -> bool:
        """Pause an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
            
        return agent.pause()
    
    def resume_agent(self, agent_id: str) -> bool:
        """Resume a paused agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
            
        return agent.resume()
    
    def delete_agent(self, agent_id: str) -> bool:
        """Delete an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
        
        # Stop the agent if it's running
        if agent.status == AgentStatus.RUNNING:
            agent.stop()
        
        # Remove from resource monitor
        self.resource_monitor.remove_agent(agent_id)
        
        # Remove from agents dictionary
        del self.agents[agent_id]
        
        # Remove from persistent storage
        self.agent_store.delete_agent(agent_id)
        
        logger.info(f"Deleted agent: {agent_id}")
        return True
    
    def get_agent_status(self, agent_id: str) -> Optional[Dict[str, Any]]:
        """Get current status of an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return None
            
        return agent.get_status()
    
    def get_agent_logs(self, agent_id: str, limit: int = 20) -> List[Dict[str, Any]]:
        """Get logs for an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return []
            
        return agent.get_logs(limit=limit)
    
    def add_task(self, agent_id: str, task_name: str, task_data: Dict[str, Any] = None) -> Optional[str]:
        """Add a task to an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return None
            
        return agent.add_task(task_name, task_data)
    
    def shutdown(self) -> None:
        """Shutdown the agent manager and all agents"""
        logger.info("Shutting down AgentManager")
        
        # Save all agents before shutting down
        self.save_all_agents()
        
        # Stop all agents
        for agent_id, agent in list(self.agents.items()):
            try:
                if agent.status == AgentStatus.RUNNING:
                    agent.stop()
            except Exception as e:
                logger.error(f"Error stopping agent {agent_id} during shutdown: {str(e)}")
        
        # Stop resource monitor
        self.resource_monitor.stop()
        
        logger.info("AgentManager shutdown complete")
    
    def get_system_metrics(self) -> Dict[str, Any]:
        """Get system-wide resource metrics"""
        return self.resource_monitor.get_system_metrics()
    
    def get_agent_metrics(self, agent_id: str, metric_type: str = None, 
                         hours: float = 1.0) -> Dict[str, List[tuple]]:
        """Get performance metrics for an agent"""
        end_time = time.time()
        start_time = end_time - (hours * 3600)  # Convert hours to seconds
        
        return self.performance_tracker.get_metrics(
            agent_id,
            metric_type,
            start_time=start_time,
            end_time=end_time
        )
    
    def get_agent_chart(self, agent_id: str, metric_type: str, 
                      width: int = 800, height: int = 400, 
                      hours: float = 1.0) -> str:
        """Generate chart for agent metrics"""
        return self.performance_tracker.generate_chart(
            agent_id,
            metric_type,
            width=width,
            height=height,
            hours=hours
        )
    
    def _load_saved_agents(self) -> None:
        """Load previously saved agents from disk"""
        try:
            agent_ids = self.agent_store.list_agents()
            logger.info(f"Found {len(agent_ids)} saved agents")
            
            for agent_id in agent_ids:
                try:
                    # First try to load the complete agent state
                    agent = self.agent_store.load_agent_state(agent_id)
                    
                    if agent:
                        # Add to managed agents
                        self.agents[agent_id] = agent
                        # Add to resource monitor
                        self.resource_monitor.add_agent(agent_id, agent)
                        logger.info(f"Restored agent: {agent.name} (id: {agent_id})")
                    else:
                        # If full state loading fails, try with metadata
                        metadata = self.agent_store.load_agent_metadata(agent_id)
                        if metadata:
                            # Create a new agent with the saved metadata
                            agent_type = metadata.get("type", "Generic")
                            name = metadata.get("name", "Unnamed Agent")
                            description = metadata.get("description", "")
                            
                            # Create the appropriate agent type
                            new_agent_id = self.create_agent(
                                name=name,
                                agent_type=agent_type,
                                description=description
                            )
                            
                            if new_agent_id:
                                logger.info(f"Recreated agent from metadata: {name} (id: {new_agent_id})")
                except Exception as e:
                    logger.error(f"Error loading agent {agent_id}: {str(e)}")
        except Exception as e:
            logger.error(f"Error loading saved agents: {str(e)}")

    def save_agent(self, agent_id: str) -> bool:
        """Save an agent to persistent storage"""
        agent = self.get_agent(agent_id)
        if not agent:
            logger.error(f"Agent not found: {agent_id}")
            return False
        
        try:
            # Save the complete agent state
            if self.agent_store.save_agent_state(agent_id, agent):
                # Also save metadata for faster access
                metadata = {
                    "id": agent_id,
                    "name": agent.name,
                    "type": agent.type.value,
                    "description": agent.description,
                    "created_at": agent.created_at
                }
                self.agent_store.save_agent_metadata(agent_id, metadata)
                return True
            return False
        except Exception as e:
            logger.error(f"Error saving agent {agent_id}: {str(e)}")
            return False

    def save_all_agents(self) -> None:
        """Save all agents to persistent storage"""
        for agent_id in self.agents:
            self.save_agent(agent_id)
    
    def _start_metrics_tracking(self, agent_id: str) -> None:
        """Start collecting metrics for an agent"""
        self._update_agent_metrics(agent_id)
    
    def _update_agent_metrics(self, agent_id: str) -> None:
        """Update metrics for an agent"""
        agent = self.get_agent(agent_id)
        if not agent:
            return
        
        # Get current resource usage
        cpu = agent.resources.get("cpu", 0)
        memory = agent.resources.get("memory", 0)
        
        # Add metrics
        self.performance_tracker.add_metric(agent_id, "cpu", cpu)
        self.performance_tracker.add_metric(agent_id, "memory", memory)
        
        # Track task stats
        pending_tasks = sum(1 for task in agent.tasks if task["status"] == "pending")
        completed_tasks = sum(1 for task in agent.tasks if task["status"] == "completed")
        
        self.performance_tracker.add_metric(agent_id, "pending_tasks", pending_tasks)
        self.performance_tracker.add_metric(agent_id, "completed_tasks", completed_tasks)
